//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2020.02.11 at 08:03:21 AM EST
//


package com.lh.pos.mismo34;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for LoanConsiderationDisclosureStatementBase.
 *
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="LoanConsiderationDisclosureStatementBase">
 *   &lt;restriction base="{http://www.mismo.org/residential/2009/schemas}MISMOEnum_Base">
 *     &lt;enumeration value="Appraisal"/>
 *     &lt;enumeration value="Assumption"/>
 *     &lt;enumeration value="Construction"/>
 *     &lt;enumeration value="ContractDetails"/>
 *     &lt;enumeration value="DemandFeature"/>
 *     &lt;enumeration value="EscrowAccountCurrent"/>
 *     &lt;enumeration value="EscrowAccountFuture"/>
 *     &lt;enumeration value="HomeownersInsurance"/>
 *     &lt;enumeration value="LatePayment"/>
 *     &lt;enumeration value="LiabilityAfterForeclosure"/>
 *     &lt;enumeration value="LoanAcceptance"/>
 *     &lt;enumeration value="NegativeAmortization"/>
 *     &lt;enumeration value="Other"/>
 *     &lt;enumeration value="PartialPayment"/>
 *     &lt;enumeration value="Refinance"/>
 *     &lt;enumeration value="SecurityInterest"/>
 *     &lt;enumeration value="Servicing"/>
 *     &lt;enumeration value="TaxDeductions"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 *
 */
@XmlType(name = "LoanConsiderationDisclosureStatementBase")
@XmlEnum
public enum LoanConsiderationDisclosureStatementBase {


    /**
     * Statement of information pertaining to borrower's right to a copy of the written property appraisal or valuation.
     *
     */
    @XmlEnumValue("Appraisal")
    APPRAISAL("Appraisal"),

    /**
     * Statement of whether a subsequent purchaser of the property may be permitted to assume the remaining loan obligation on its original terms.
     *
     */
    @XmlEnumValue("Assumption")
    ASSUMPTION("Assumption"),

    /**
     * Statement related to transactions involving new construction providing information about potential issuance of a revised disclosure.
     *
     */
    @XmlEnumValue("Construction")
    CONSTRUCTION("Construction"),

    /**
     * Statement referring the consumer to the loan contract for additional information about loan terms.
     *
     */
    @XmlEnumValue("ContractDetails")
    CONTRACT_DETAILS("ContractDetails"),

    /**
     * Statement relating to whether the legal obligation of the loan permits the creditor to demand early repayment of the loan.
     *
     */
    @XmlEnumValue("DemandFeature")
    DEMAND_FEATURE("DemandFeature"),

    /**
     * Statement on whether the loan will have an escrow account, and details about the payments made using escrow account funds and those the consumer must make directly.
     *
     */
    @XmlEnumValue("EscrowAccountCurrent")
    ESCROW_ACCOUNT_CURRENT("EscrowAccountCurrent"),

    /**
     * Statement providing information about future requirements for property costs and the escrow account.
     *
     */
    @XmlEnumValue("EscrowAccountFuture")
    ESCROW_ACCOUNT_FUTURE("EscrowAccountFuture"),

    /**
     * Statement of whether homeowners insurance is required as a condition of the loan transaction.
     *
     */
    @XmlEnumValue("HomeownersInsurance")
    HOMEOWNERS_INSURANCE("HomeownersInsurance"),

    /**
     * Statement detailing any dollar or percentage charge that may be imposed before maturity due to a late payment.
     *
     */
    @XmlEnumValue("LatePayment")
    LATE_PAYMENT("LatePayment"),

    /**
     * Statement related to the liability of the borrower for any unpaid loan balance after foreclosure.
     *
     */
    @XmlEnumValue("LiabilityAfterForeclosure")
    LIABILITY_AFTER_FORECLOSURE("LiabilityAfterForeclosure"),

    /**
     * Statement clarifying that the consumer does not have to accept the loan because the consumer has received the integrated disclosure document or signed a loan application.
     *
     */
    @XmlEnumValue("LoanAcceptance")
    LOAN_ACCEPTANCE("LoanAcceptance"),

    /**
     * Statement notifying the consumer that the transaction may or will result in negative amortization.
     *
     */
    @XmlEnumValue("NegativeAmortization")
    NEGATIVE_AMORTIZATION("NegativeAmortization"),
    @XmlEnumValue("Other")
    OTHER("Other"),

    /**
     * Statement on the creditor's policy regarding the acceptance of partial payments, and if partial payments are accepted, how such payments will be applied to the mortgage and whether such payments will be placed in escrow.
     *
     */
    @XmlEnumValue("PartialPayment")
    PARTIAL_PAYMENT("PartialPayment"),

    /**
     * Statement of the factors in the borrower's ability to refinance the loan.
     *
     */
    @XmlEnumValue("Refinance")
    REFINANCE("Refinance"),

    /**
     * Statement that a security interest has been taken in the property that secures the transaction or in property not purchased as part of  the transaction by item or type.
     *
     */
    @XmlEnumValue("SecurityInterest")
    SECURITY_INTEREST("SecurityInterest"),

    /**
     * Statement of the creditor's intention to retain or transfer servicing of the loan.
     *
     */
    @XmlEnumValue("Servicing")
    SERVICING("Servicing"),

    /**
     * Statement that, if the extension of credit exceeds the fair market value of the property, the interest on the portion of the credit extension that is greater than the fair market value of the property is not tax deductible for Federal income tax purposes and a statement that the consumer should consult a tax adviser for further information.
     *
     */
    @XmlEnumValue("TaxDeductions")
    TAX_DEDUCTIONS("TaxDeductions");
    private final String value;

    LoanConsiderationDisclosureStatementBase(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static LoanConsiderationDisclosureStatementBase fromValue(String v) {
        for (LoanConsiderationDisclosureStatementBase c: LoanConsiderationDisclosureStatementBase.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
