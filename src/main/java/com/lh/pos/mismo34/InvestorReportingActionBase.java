//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2020.02.11 at 08:03:21 AM EST
//


package com.lh.pos.mismo34;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for InvestorReportingActionBase.
 *
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="InvestorReportingActionBase">
 *   &lt;restriction base="{http://www.mismo.org/residential/2009/schemas}MISMOEnum_Base">
 *     &lt;enumeration value="Active"/>
 *     &lt;enumeration value="AssignedToFHAOrVA"/>
 *     &lt;enumeration value="DeedInLieuLiquidated"/>
 *     &lt;enumeration value="ExerciseSkipPay"/>
 *     &lt;enumeration value="ForeclosureLiquidatedHeldForSale"/>
 *     &lt;enumeration value="ForeclosureLiquidatedPendingConveyance"/>
 *     &lt;enumeration value="ForeclosureLiquidatedThirdPartySale"/>
 *     &lt;enumeration value="ForeclosureSaleUnsuccessful"/>
 *     &lt;enumeration value="Inactive"/>
 *     &lt;enumeration value="LiquidatedHeldForSale"/>
 *     &lt;enumeration value="MICancellationAutomaticTermination"/>
 *     &lt;enumeration value="MICancellationBasedOnCurrentPropertyValue"/>
 *     &lt;enumeration value="MICancellationBasedOnMandatoryTermination"/>
 *     &lt;enumeration value="MICancellationBasedOnOriginalPropertyValue"/>
 *     &lt;enumeration value="MIRescindedByInsurer"/>
 *     &lt;enumeration value="NoServicerActionTaken"/>
 *     &lt;enumeration value="Other"/>
 *     &lt;enumeration value="PaidInFullAtMaturity"/>
 *     &lt;enumeration value="PaidInFullPriorToMaturity"/>
 *     &lt;enumeration value="Payoff"/>
 *     &lt;enumeration value="PayoffShortSale"/>
 *     &lt;enumeration value="PrincipalBalanceCorrection"/>
 *     &lt;enumeration value="Repurchase"/>
 *     &lt;enumeration value="RepurchaseDueToARMConversionToFixedRate"/>
 *     &lt;enumeration value="RepurchaseDueToModifiedARM"/>
 *     &lt;enumeration value="Supplemental"/>
 *     &lt;enumeration value="TransferToREO"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 *
 */
@XmlType(name = "InvestorReportingActionBase")
@XmlEnum
public enum InvestorReportingActionBase {


    /**
     * The loan is considered current.
     *
     */
    @XmlEnumValue("Active")
    ACTIVE("Active"),

    /**
     * The loan as been assigned to the FHA or VA.
     *
     */
    @XmlEnumValue("AssignedToFHAOrVA")
    ASSIGNED_TO_FHA_OR_VA("AssignedToFHAOrVA"),
    @XmlEnumValue("DeedInLieuLiquidated")
    DEED_IN_LIEU_LIQUIDATED("DeedInLieuLiquidated"),

    /**
     * A change in loan status due to a borrower request to exercise the skip payment feature.
     *
     */
    @XmlEnumValue("ExerciseSkipPay")
    EXERCISE_SKIP_PAY("ExerciseSkipPay"),

    /**
     * A change in loan status due to the foreclosure sale of the borrowers property to pay off a defaulted loan. The property is currently held for sale.
     *
     */
    @XmlEnumValue("ForeclosureLiquidatedHeldForSale")
    FORECLOSURE_LIQUIDATED_HELD_FOR_SALE("ForeclosureLiquidatedHeldForSale"),

    /**
     * A change in loan status due to the foreclosure sale of the borrowers property to pay off a defaulted loan. The property is awaiting conveyance to purchaser.
     *
     */
    @XmlEnumValue("ForeclosureLiquidatedPendingConveyance")
    FORECLOSURE_LIQUIDATED_PENDING_CONVEYANCE("ForeclosureLiquidatedPendingConveyance"),

    /**
     * A change in loan status due to the foreclosure sale of the borrowers property to pay off a defaulted loan. Property has been sold and conveyed to someone other than the mortgagee or mortgagor.
     *
     */
    @XmlEnumValue("ForeclosureLiquidatedThirdPartySale")
    FORECLOSURE_LIQUIDATED_THIRD_PARTY_SALE("ForeclosureLiquidatedThirdPartySale"),
    @XmlEnumValue("ForeclosureSaleUnsuccessful")
    FORECLOSURE_SALE_UNSUCCESSFUL("ForeclosureSaleUnsuccessful"),
    @XmlEnumValue("Inactive")
    INACTIVE("Inactive"),
    @XmlEnumValue("LiquidatedHeldForSale")
    LIQUIDATED_HELD_FOR_SALE("LiquidatedHeldForSale"),

    /**
     * A change in loan status due to automatic mortgage insurance cancellation provisions.
     *
     */
    @XmlEnumValue("MICancellationAutomaticTermination")
    MI_CANCELLATION_AUTOMATIC_TERMINATION("MICancellationAutomaticTermination"),

    /**
     * A change in loan status due to mortgage insurance cancellation based on current property value.
     *
     */
    @XmlEnumValue("MICancellationBasedOnCurrentPropertyValue")
    MI_CANCELLATION_BASED_ON_CURRENT_PROPERTY_VALUE("MICancellationBasedOnCurrentPropertyValue"),

    /**
     * A change in loan status due to mandatory mortgage insurance cancellation.
     *
     */
    @XmlEnumValue("MICancellationBasedOnMandatoryTermination")
    MI_CANCELLATION_BASED_ON_MANDATORY_TERMINATION("MICancellationBasedOnMandatoryTermination"),

    /**
     * A change in loan status due to mortgage insurance cancellation based on original property value.
     *
     */
    @XmlEnumValue("MICancellationBasedOnOriginalPropertyValue")
    MI_CANCELLATION_BASED_ON_ORIGINAL_PROPERTY_VALUE("MICancellationBasedOnOriginalPropertyValue"),

    /**
     * Mortgage insurance is rescinded or canceled by the insurer.
     *
     */
    @XmlEnumValue("MIRescindedByInsurer")
    MI_RESCINDED_BY_INSURER("MIRescindedByInsurer"),

    /**
     * Current or delinquent without servicer action
     *
     */
    @XmlEnumValue("NoServicerActionTaken")
    NO_SERVICER_ACTION_TAKEN("NoServicerActionTaken"),
    @XmlEnumValue("Other")
    OTHER("Other"),

    /**
     * The loan is paid in full at the loans maturity date where the last payment has been received.
     *
     */
    @XmlEnumValue("PaidInFullAtMaturity")
    PAID_IN_FULL_AT_MATURITY("PaidInFullAtMaturity"),

    /**
     * The loan is paid in full and the action date is prior to the loans maturity date.
     *
     */
    @XmlEnumValue("PaidInFullPriorToMaturity")
    PAID_IN_FULL_PRIOR_TO_MATURITY("PaidInFullPriorToMaturity"),

    /**
     * All outstanding balances on the loan have been paid in full.
     *
     */
    @XmlEnumValue("Payoff")
    PAYOFF("Payoff"),

    /**
     * The sale of the mortgaged premises for less than the total amount necessary to satisfy the outstanding debt.
     *
     */
    @XmlEnumValue("PayoffShortSale")
    PAYOFF_SHORT_SALE("PayoffShortSale"),
    @XmlEnumValue("PrincipalBalanceCorrection")
    PRINCIPAL_BALANCE_CORRECTION("PrincipalBalanceCorrection"),

    /**
     * A repurchase due to the fact that the loan does not meet or no longer meets the contract parameters (a quality control issue).
     *
     */
    @XmlEnumValue("Repurchase")
    REPURCHASE("Repurchase"),

    /**
     * A repurchase due to the fact that the loan characteristics are being modified so that the loan no longer meets the ARM contract parameters. Loan is often repurchased by the Investor after the modification under a different contract.
     *
     */
    @XmlEnumValue("RepurchaseDueToARMConversionToFixedRate")
    REPURCHASE_DUE_TO_ARM_CONVERSION_TO_FIXED_RATE("RepurchaseDueToARMConversionToFixedRate"),

    /**
     * A repurchase due to the fact that the loan characteristics are being modified so that the loan no longer meets the current ARM contract parameters and is being modified into a new ARM loan.
     *
     */
    @XmlEnumValue("RepurchaseDueToModifiedARM")
    REPURCHASE_DUE_TO_MODIFIED_ARM("RepurchaseDueToModifiedARM"),

    /**
     * Information on the loan reported by the servicer after liquidation.
     *
     */
    @XmlEnumValue("Supplemental")
    SUPPLEMENTAL("Supplemental"),
    @XmlEnumValue("TransferToREO")
    TRANSFER_TO_REO("TransferToREO");
    private final String value;

    InvestorReportingActionBase(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static InvestorReportingActionBase fromValue(String v) {
        for (InvestorReportingActionBase c: InvestorReportingActionBase.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
