//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2020.02.11 at 08:03:21 AM EST
//


package com.lh.pos.mismo34;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for DataSourceBase.
 *
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="DataSourceBase">
 *   &lt;restriction base="{http://www.mismo.org/residential/2009/schemas}MISMOEnum_Base">
 *     &lt;enumeration value="AssessmentAndTaxRecords"/>
 *     &lt;enumeration value="CooperativeBoard"/>
 *     &lt;enumeration value="Developer"/>
 *     &lt;enumeration value="EngagementLetter"/>
 *     &lt;enumeration value="ExteriorInspectionOnly"/>
 *     &lt;enumeration value="HomeownersAssociation"/>
 *     &lt;enumeration value="InteriorExteriorInspection"/>
 *     &lt;enumeration value="InvestorGuidance"/>
 *     &lt;enumeration value="LoanFile"/>
 *     &lt;enumeration value="ManagementAgency"/>
 *     &lt;enumeration value="MultipleListingService"/>
 *     &lt;enumeration value="Other"/>
 *     &lt;enumeration value="PreviousAppraisalFile"/>
 *     &lt;enumeration value="PriorInspection"/>
 *     &lt;enumeration value="PropertyOwner"/>
 *     &lt;enumeration value="PurchaseAgreement"/>
 *     &lt;enumeration value="ThirdPartyAppraisalReport"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 *
 */
@XmlType(name = "DataSourceBase")
@XmlEnum
public enum DataSourceBase {

    @XmlEnumValue("AssessmentAndTaxRecords")
    ASSESSMENT_AND_TAX_RECORDS("AssessmentAndTaxRecords"),
    @XmlEnumValue("CooperativeBoard")
    COOPERATIVE_BOARD("CooperativeBoard"),
    @XmlEnumValue("Developer")
    DEVELOPER("Developer"),

    /**
     * The assignment-level contract to an appraiser from a client providing details of the assignment and expectations.
     *
     */
    @XmlEnumValue("EngagementLetter")
    ENGAGEMENT_LETTER("EngagementLetter"),
    @XmlEnumValue("ExteriorInspectionOnly")
    EXTERIOR_INSPECTION_ONLY("ExteriorInspectionOnly"),
    @XmlEnumValue("HomeownersAssociation")
    HOMEOWNERS_ASSOCIATION("HomeownersAssociation"),
    @XmlEnumValue("InteriorExteriorInspection")
    INTERIOR_EXTERIOR_INSPECTION("InteriorExteriorInspection"),

    /**
     * Instructions from a published or provided guideline of a secondary market investor.
     *
     */
    @XmlEnumValue("InvestorGuidance")
    INVESTOR_GUIDANCE("InvestorGuidance"),

    /**
     * The collective information on a specific mortgage loan that includes both documents and data.
     *
     */
    @XmlEnumValue("LoanFile")
    LOAN_FILE("LoanFile"),
    @XmlEnumValue("ManagementAgency")
    MANAGEMENT_AGENCY("ManagementAgency"),
    @XmlEnumValue("MultipleListingService")
    MULTIPLE_LISTING_SERVICE("MultipleListingService"),
    @XmlEnumValue("Other")
    OTHER("Other"),
    @XmlEnumValue("PreviousAppraisalFile")
    PREVIOUS_APPRAISAL_FILE("PreviousAppraisalFile"),
    @XmlEnumValue("PriorInspection")
    PRIOR_INSPECTION("PriorInspection"),
    @XmlEnumValue("PropertyOwner")
    PROPERTY_OWNER("PropertyOwner"),

    /**
     * The legally binding agreement between the buyer and seller also known as Sales Contract.
     *
     */
    @XmlEnumValue("PurchaseAgreement")
    PURCHASE_AGREEMENT("PurchaseAgreement"),
    @XmlEnumValue("ThirdPartyAppraisalReport")
    THIRD_PARTY_APPRAISAL_REPORT("ThirdPartyAppraisalReport");
    private final String value;

    DataSourceBase(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static DataSourceBase fromValue(String v) {
        for (DataSourceBase c: DataSourceBase.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
