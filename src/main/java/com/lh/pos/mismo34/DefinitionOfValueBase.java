//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2020.02.11 at 08:03:21 AM EST
//


package com.lh.pos.mismo34;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for DefinitionOfValueBase.
 *
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="DefinitionOfValueBase">
 *   &lt;restriction base="{http://www.mismo.org/residential/2009/schemas}MISMOEnum_Base">
 *     &lt;enumeration value="AsIsValue"/>
 *     &lt;enumeration value="AsRepaired"/>
 *     &lt;enumeration value="ForecastValue"/>
 *     &lt;enumeration value="MarketValue"/>
 *     &lt;enumeration value="Other"/>
 *     &lt;enumeration value="QuickSaleValue"/>
 *     &lt;enumeration value="RetrospectiveValue"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 *
 */
@XmlType(name = "DefinitionOfValueBase")
@XmlEnum
public enum DefinitionOfValueBase {

    @XmlEnumValue("AsIsValue")
    AS_IS_VALUE("AsIsValue"),
    @XmlEnumValue("AsRepaired")
    AS_REPAIRED("AsRepaired"),

    /**
     * The anticipated selling price of a property as of a defined time-period or date.
     *
     */
    @XmlEnumValue("ForecastValue")
    FORECAST_VALUE("ForecastValue"),
    @XmlEnumValue("MarketValue")
    MARKET_VALUE("MarketValue"),
    @XmlEnumValue("Other")
    OTHER("Other"),
    @XmlEnumValue("QuickSaleValue")
    QUICK_SALE_VALUE("QuickSaleValue"),
    @XmlEnumValue("RetrospectiveValue")
    RETROSPECTIVE_VALUE("RetrospectiveValue");
    private final String value;

    DefinitionOfValueBase(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static DefinitionOfValueBase fromValue(String v) {
        for (DefinitionOfValueBase c: DefinitionOfValueBase.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
